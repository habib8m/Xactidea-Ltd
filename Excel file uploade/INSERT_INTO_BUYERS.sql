CREATE OR REPLACE PROCEDURE DEVERP.INSERT_INTO_BUYERS 
IS
CURSOR CUR_BUYERS IS
SELECT 
  BX.BUYER_NAME,
  BX.SHORT_NAME,
  O.PID AS ORIGIN_ID,  --ORIGIN_ID
  NVL(BX.BUYER_CODE, SUBSTR(BX.BUYER_NAME, 1, 2)) AS BUYER_CODE,
  BX.TOP_CODE,
  CASE WHEN UPPER(BX.DEFERRED_LC)  = UPPER('Yes') THEN 1
       WHEN UPPER(BX.DEFERRED_LC) = UPPER('No') THEN 0
       ELSE NULL
       END AS DEFERRED_LC,  --DIFF_LC
  T.ID AS TENOR_NAME, --TENOR_NAME,  --TENOR_ID
  BX.C_P_E_MAIL,
  BX.WEBSITE,
  BX.ADDRESS,
  BX.SEWING_MKT_EFF,
  BX.SEWING_EFF,
  BX.CUT_OFF,    
  BX.DEL_BUFFER,    
  BX.MIN_PROFIT, 
  B.PID AS NOMINATED_BANK, --NOMINATED_BANK, --NOMINATED_BANK_ID
  CASE WHEN UPPER(BX.REALISATION_NATURE) = UPPER('Partial') THEN 1
       WHEN UPPER(BX.REALISATION_NATURE) = UPPER('Full at time') THEN 2
       ELSE NULL
       END AS REALISATION_NATURE,
  CASE WHEN UPPER(BX.LC_OPEN) = UPPER('Yes') THEN 1
       WHEN UPPER(BX.LC_OPEN) = UPPER('No') THEN 0
       ELSE NULL
       END AS LC_OPEN,
  BX.LC_DAYS,
  PTT.PAYMENT_TERM_NO, --PAY_TERM, 
  BX.CONTACT_NO,
  BX.LC_TRANSFERABLE,
  INC.ID AS INCOTERM, --INCOTERM,
  PT.PORT_ID AS INCOTERM_PLACE, --INCOTERM_PLACE, --INCOTERM_PLACE_ID
  BX.COMMISSION_LOCAL,
  BX.SHIPMENT_TOLERANCE,
  PM.PAYMENT_MODE_ID, --PAY_MODE,
  BX.PARTIAL_SHIPMENT,
  BX.TRANSHIPMENT,
  BX.INSPECTION_CERTIFICATE,
  BX.INSPECTION_BY,
  BX.INSURANCE,
  BX.PAID_BY,
  B.PID AS BUYER_BANK, --BUYER_BANK, --BUYER_BANK_ID
  B.PID AS ADVISING_BANK, --ADVISING_BANK, --ADVISING_BANK_ID
  BX.ADITIONAL_EXP_DAYS,
  B.PID AS DOC_BANK, --DOC_BANK, --DOC_BANK_ID
  B.PID AS ISSUING_BANK, --ISSUING_BANK, --ISSUING_BANK_ID
  PO.PORT_ID AS PORT_LOADING, --PORT_LOADING, --PORT_LOADING_ID
  BX.BWOD,
  BX.BWED,
  PO.PORT_ID AS PORT_DISCHAGE, --PORT_DISCHAGE, --PORT_DISCHAGE_ID
  BX.COMMISSION_FOREIGN,
  BX.FACTORY_RATE_PCT,
  BX.BUYER_DEPT_NAME,  --BUYER_DEPT_TBL TABLE--
  BX.DEPT_HEAD,
  BX.BRAND_NAME,   --BUYER_BRANDS TABLE--
  S.ID AS SAMPLE_NAME, --SAMPLE_NAME, --SAMPLE_ID --BUYER_SAMPLE TABLE--
  CASE WHEN UPPER(BX.APPROVAL_REQ) = UPPER('Yes') THEN 1
       WHEN UPPER(BX.APPROVAL_REQ) = UPPER('No') THEN 0
       ELSE NULL
       END AS APPROVAL_REQ, --APPROVAL_REQ_ID
  CASE WHEN UPPER(BX.APP_STAG) = UPPER('Before Order') THEN 1
       WHEN UPPER(BX.APP_STAG) = UPPER('After Order') THEN 2
       ELSE NULL
       END AS APP_STAG, --APP_STAG_ID
  TS.ID AS TNA_TASK_MAPPED, --TNA_TASK_MAPPED, --TNA_TASK_MAPPED_ID
  CASE WHEN UPPER(APPROVAL_NATURE) = UPPER('Style wise') THEN 1
       WHEN UPPER(APPROVAL_NATURE) = UPPER('PO Wise') THEN 2
       WHEN UPPER(APPROVAL_NATURE) = UPPER('Color Wise') THEN 3
       WHEN UPPER(APPROVAL_NATURE) = UPPER('Size Wise') THEN 4
       ELSE NULL
       END AS APPROVAL_NATURE, --APP_NATURE_ID
  BX.CODE,  --BUYER_SEASONS TABLE--
  BX.DETAIL,
  BT.ID AS BUYER_TYPE, --BUYER_TYPE,  --BUYER_TYPE_ID  --BUYER_TYPES_DTL TABLE--
  BX.NOTES,
  N.ID AS NATURE, --NATURE, --NATURE_NO --SUPPLIER_NATURES TABLE--
  AU.ID AS AUDIT_TYPE, --AUDIT_TYPE, --AUDIT_TYPE_ID --CMP_BUYER_AUDIT_REQ TABLE--
  BX.REQUIREMENT
FROM BUYERS_XL BX,
     ORIGIN O,
     TENORS T,
     (SELECT B.BANK_NAME||' - '||BB.BANK_BRANCH_NAME BANK_NAME, BB.PID FROM BANK B, BANKBRANCH BB WHERE BB.BANK_PID = B.PID) B,
     PAYMENT_TERM_TBL PTT,
     (SELECT NAME, ID FROM REFERENCES WHERE KEY = 'PAYMENT_MODE') INC,
     PORT_TBL PT,
     PAYMENT_MODE PM,
     (SELECT P.PORT_NAME,P.PORT_ID FROM PORT_TBL P, ORIGIN O WHERE P.ORIGIN_ID = O.PID) PO,
     (SELECT SAMPLE_TYPE_NAME||' ['||SAMPLE_TYPE_CODE||' ]' SAMPLE ,ID FROM SAM_SAMPLE_TYPE) S,
     (SELECT TASK_NAME, ID FROM TNA_TASKS) TS,
     (SELECT BUYER_TYPE_NAME, ID FROM BUYER_TYPES) BT,
     (SELECT NAME, ID FROM REFERENCES WHERE KEY = 'ITEM_REF') N,
     (SELECT LOV_CATEGORY_NAME, ID FROM CMP_LOV_CATEGORIES WHERE MST_ID = 1 AND ACTIVE_STATUS = 1) AU
WHERE UPPER(TRIM(BX.ORIGIN_NAME)) = UPPER(TRIM(O.ORIGIN_NAME(+)))
AND UPPER(TRIM(BX.TENOR_NAME)) = UPPER(TRIM(T.NAME(+)))
AND UPPER(TRIM(BX.NOMINATED_BANK)) = UPPER(TRIM(BANK_NAME(+)))
AND UPPER(TRIM(BX.PAY_TERM)) = UPPER(TRIM(PTT.PAYMENT_TERM_NAME(+)))
AND UPPER(TRIM(BX.INCOTERM)) = UPPER(TRIM(INC.NAME(+)))
AND UPPER(TRIM(BX.INCOTERM_PLACE)) = UPPER(TRIM(PT.PORT_NAME(+)))
AND UPPER(TRIM(BX.PAY_MODE)) = UPPER(TRIM(PM.PAYMENT_MODE_NAME(+)))
AND UPPER(TRIM(BX.PORT_LOADING)) = UPPER(TRIM(PO.PORT_NAME(+)))
AND UPPER(TRIM(BX.SAMPLE_NAME)) = UPPER(TRIM(S.SAMPLE(+)))
AND UPPER(TRIM(BX.TNA_TASK_MAPPED)) = UPPER(TRIM(TS.TASK_NAME(+)))
AND UPPER(TRIM(BX.BUYER_TYPE)) = UPPER(TRIM(BT.BUYER_TYPE_NAME(+)))
AND UPPER(TRIM(BX.NATURE)) = UPPER(TRIM(N.NAME(+)))
AND TRIM(UPPER(BX.AUDIT_TYPE)) = TRIM(UPPER(AU.LOV_CATEGORY_NAME(+)));

V_BUYERS_ID NUMBER;
V_DEPT_ID NUMBER;
V_BRAND_ID NUMBER;
V_SAMPLE_ID NUMBER;
V_SEASON_ID NUMBER;
V_BUYER_TYPE_ID NUMBER;
V_NATURE_ID NUMBER;
V_AUDIT_ID NUMBER;
v_exists number;
V_BUYER_NAME VARCHAR2(100):='N/A';
--V_SHORT_NAME VARCHAR2 (100) := 'N/A';


BEGIN


FOR REC IN CUR_BUYERS LOOP
SELECT COUNT(*)
into v_exists
FROM BUYERS b
WHERE UPPER(b.BUYER_NAME) = UPPER(REC.BUYER_NAME)
or UPPER(b.SHORT_NAME) = UPPER(REC.SHORT_NAME);
IF v_exists = 0 and V_BUYER_NAME <> REC.BUYER_NAME
--and V_SHORT_NAME <> REC.SHORT_NAME 
THEN 
V_BUYERS_ID := next_id('BUYERS');

    INSERT INTO BUYERS
    (ID,
    BUYER_NAME,
    SHORT_NAME,
    ORIGIN_ID,
    BUYER_CODE,
    TOP_CODE,
    DIFF_LC,
    TENOR_ID,
    C_P_E_MAIL,
    WEBSITE,
    ADDRESS,
    SEWING_MKT_EFF,
    SEWING_EFF,
    CUT_OFF,
    DEL_BUFFER,
    MIN_PROFIT,
    NOMINATED_BANK_ID,
    REALISATION_NATURE,
    LC_OPEN,
    LC_DAYS,
    PAY_TERM,
    CONTACT_NO,
    LC_TRANSFERABLE,
    INCOTERM,
    INCOTERM_PLACE_ID,
    COMMISSION_LOCAL,
    SHIPMENT_TOLERANCE,
    PAY_MODE,
    PARTIAL_SHIPMENT,
    TRANSHIPMENT,
    INSPECTION_CERTIFICATE,
    INSPECTION_BY,
    INSURANCE,
    PAID_BY,
    BUYER_BANK_ID,
    ADVISING_BANK_ID,
    ADITIONAL_EXP_DAYS,
    DOC_BANK_ID,
    ISSUING_BANK_ID,
    PORT_LOADING_ID,
    BWOD,
    BWED,
    PORT_DISCHAGE_ID,
    COMMISSION_FOREIGN,
    FACTORY_RATE_PCT,
    NATURE)
    VALUES
    (V_BUYERS_ID,
    REC.BUYER_NAME,
    case when REC.SHORT_NAME is null then to_char(V_BUYERS_ID) else REC.SHORT_NAME end,
    REC.ORIGIN_ID,
    REC.BUYER_CODE,
    REC.TOP_CODE,
    REC.DEFERRED_LC,
    REC.TENOR_NAME,
    REC.C_P_E_MAIL,
    REC.WEBSITE,
    REC.ADDRESS,
    REC.SEWING_MKT_EFF,
    REC.SEWING_EFF,
    REC.CUT_OFF,
    REC.DEL_BUFFER,
    REC.MIN_PROFIT,
    REC.NOMINATED_BANK,
    REC.REALISATION_NATURE,
    REC.LC_OPEN,
    REC.LC_DAYS,
    REC.PAYMENT_TERM_NO,
    REC.CONTACT_NO,
    REC.LC_TRANSFERABLE,
    REC.INCOTERM,
    REC.INCOTERM_PLACE,
    REC.COMMISSION_LOCAL,
    REC.SHIPMENT_TOLERANCE,
    REC.PAYMENT_MODE_ID,
    REC.PARTIAL_SHIPMENT,
    REC.TRANSHIPMENT,
    REC.INSPECTION_CERTIFICATE,
    REC.INSPECTION_BY,
    REC.INSURANCE,
    REC.PAID_BY,
    REC.BUYER_BANK,
    REC.ADVISING_BANK,
    REC.ADITIONAL_EXP_DAYS,
    REC.DOC_BANK,
    REC.ISSUING_BANK,
    REC.PORT_LOADING,
    REC.BWOD,
    REC.BWED,
    REC.PORT_DISCHAGE,
    REC.COMMISSION_FOREIGN,
    REC.FACTORY_RATE_PCT,
    'B');
    
    --V_BUYER_NAME:= REC.BUYER_NAME;
    --V_SHORT_NAME := REC.SHORT_NAME;
    end if;

    
if REC.BUYER_DEPT_NAME is not null then
V_DEPT_ID:= next_id('BUYER_DEPT_TBL');
    BEGIN
    INSERT INTO BUYER_DEPT_TBL
    (ID,
    BUYER_ID,
    BUYER_DEPT_NAME,
    DEPT_HEAD)
    VALUES
    (V_DEPT_ID,
    V_BUYERS_ID,
    REC.BUYER_DEPT_NAME,
    REC.DEPT_HEAD);
    END;    
end if;

if REC.BRAND_NAME is not null then    
V_BRAND_ID:= next_id('BUYER_BRANDS');
    BEGIN
    INSERT INTO BUYER_BRANDS
    (ID,
    BUYER_ID,
    BRAND_NAME)
    VALUES
    (V_BRAND_ID,
    V_BUYERS_ID,
    REC.BRAND_NAME);
    END;
END IF;

if REC.SAMPLE_NAME is not null then
V_SAMPLE_ID:= next_id('BUYER_SAMPLE');
    BEGIN
    INSERT INTO BUYER_SAMPLE
    (ID,
    BUYER_ID,
    SAMPLE_ID,
    APPROVAL_REQ_ID,
    APP_STAG_ID,
    TNA_TASK_MAPPED_ID,
    APP_NATURE_ID)
    VALUES
    (V_SAMPLE_ID,
    V_BUYERS_ID,
    REC.SAMPLE_NAME,
    REC.APPROVAL_REQ,
    REC.APP_STAG,
    REC.TNA_TASK_MAPPED,
    REC.APPROVAL_NATURE);
    END;
END IF;
    
if REC.CODE is not null then
V_SEASON_ID:= next_id('BUYER_SEASONS');
    BEGIN
    INSERT INTO BUYER_SEASONS
    (ID,
    BUYER_ID,
    CODE,
    DETAIL,
    NAME)
    VALUES
    (V_SEASON_ID,
    V_BUYERS_ID,
    REC.CODE,
    REC.DETAIL,
    SUBSTR(REC.DETAIL, 1, 1) || SUBSTR(REC.DETAIL, INSTR(REC.DETAIL, ' ') + 1, 1));
    END;
END IF;

if REC.BUYER_TYPE is not null then
V_BUYER_TYPE_ID:= next_id('BUYER_TYPES_DTL');
    BEGIN
    INSERT INTO BUYER_TYPES_DTL
    (ID,
    BUYER_ID,
    BUYER_TYPE_ID,
    NOTES)
    VALUES
    (V_BUYER_TYPE_ID,
    V_BUYERS_ID,
    REC.BUYER_TYPE,
    REC.NOTES);
    END;
    END IF;

if REC.NATURE is not null then
V_NATURE_ID:= next_id('SUPPLIER_NATURES');
    BEGIN
    INSERT INTO SUPPLIER_NATURES
    (ID,
    BUYER_ID,
    NATURE_NO)
    VALUES
    (V_NATURE_ID,
    V_BUYERS_ID,
    REC.NATURE);
    END;
END IF;

if REC.AUDIT_TYPE is not null then
V_AUDIT_ID:= next_id('CMP_BUYER_AUDIT_REQ');
    BEGIN
    INSERT INTO CMP_BUYER_AUDIT_REQ
    (ID,
    BUYER_ID,
    AUDIT_TYPE_ID,
    REQUIREMENT)
    VALUES
    (V_AUDIT_ID,
    V_BUYERS_ID,
    REC.AUDIT_TYPE,
    REC.REQUIREMENT);
    END;
END IF;

 --END IF --new add   
END LOOP;
COMMIT;

--BEGIN
--DELETE FROM BUYERS_XL;
--COMMIT;
--END;

EXCEPTION WHEN OTHERS THEN 
DBMS_OUTPUT.PUT_LINE(SQLERRM);

END;
/
